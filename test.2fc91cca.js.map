{"version":3,"sources":["test.ts"],"names":[],"mappings":";AAsCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA","file":"test.2fc91cca.js","sourceRoot":"..","sourcesContent":["//*\nimport MangroveReviews from \"./Logic/Web/MangroveReviews\";\nimport ReviewElement from \"./UI/Reviews/ReviewElement\";\nimport {UIEventSource} from \"./Logic/UIEventSource\";\nimport ReviewForm from \"./UI/Reviews/ReviewForm\";\nimport Combine from \"./UI/Base/Combine\";\nimport {FixedUiElement} from \"./UI/Base/FixedUiElement\";\n\n/*\nwindow.setTimeout(\n    () => {\nmangroveReviews.AddReview({\n    comment: \"These are liars - not even an island here!\",\n    author: \"Lost Tourist\",\n    date: new Date(),\n    affiliated: false,\n    rating: 10\n}, (() => {alert(\"Review added\");return undefined;}));\n        \n    }, 1000\n)\n\nwindow.setTimeout(\n    () => {\n        mangroveReviews.AddReview({\n            comment: \"Excellent conditions to measure weather!!\",\n            author: \"Weather-Boy\",\n            date: new Date(),\n            affiliated: true,\n            rating: 90\n        }, (() => {\n            alert(\"Review added\");\n            return undefined;\n        }));\n\n    }, 1000\n)\n*/\n/*/\n\n\nimport {Utils} from \"./Utils\";\nimport {FixedUiElement} from \"./UI/Base/FixedUiElement\";\n\n\nfunction generateStats(action: (stats: string) => void) {\n    // Binary searches the latest changeset\n    function search(lowerBound: number,\n                    upperBound: number,\n                    onCsFound: ((id: number, lastDate: Date) => void),\n                    depth = 0) {\n        if (depth > 30) {\n            return;\n        }\n        const tested = Math.floor((lowerBound + upperBound) / 2);\n        console.log(\"Testing\", tested)\n        Utils.changesetDate(tested, (createdAtDate: Date) => {\n            new FixedUiElement(`Searching, value between ${lowerBound} and ${upperBound}. Queries till now: ${depth}`).AttachTo('maindiv')\n            if (lowerBound + 1 >= upperBound) {\n                onCsFound(lowerBound, createdAtDate);\n                return;\n            }\n            if (createdAtDate !== undefined) {\n                search(tested, upperBound, onCsFound, depth + 1)\n            } else {\n                search(lowerBound, tested, onCsFound, depth + 1);\n            }\n        })\n\n    }\n\n\n    search(91000000, 100000000, (last, lastDate: Date) => {\n            const link = \"http://osm.org/changeset/\" + last;\n\n            const delta = 100000;\n\n            Utils.changesetDate(last - delta, (prevDate) => {\n\n\n                const diff = (lastDate.getTime() - prevDate.getTime()) / 1000;\n\n                // Diff: seconds needed/delta changesets\n                const secsPerCS = diff / delta;\n\n                const stillNeeded = 1000000 - (last % 1000000);\n                const timeNeededSeconds = Math.floor(secsPerCS * stillNeeded);\n\n                const secNeeded = timeNeededSeconds % 60;\n                const minNeeded = Math.floor(timeNeededSeconds / 60) % 60;\n                const hourNeeded = Math.floor(timeNeededSeconds / (60 * 60)) % 24;\n                const daysNeeded = Math.floor(timeNeededSeconds / (24 * 60 * 60));\n\n                const result = `Last changeset: <a href='${link}'>${link}</a><br/>We needed ${(Math.floor(diff / 60))} minutes for the last ${delta} changesets.<br/>\nThis is around ${secsPerCS} seconds/changeset.<br/> The next million (still ${stillNeeded} away) will be broken in around ${daysNeeded} days ${hourNeeded}:${minNeeded}:${secNeeded}`\n                action(result);\n            })\n\n        }\n    );\n\n}\n\ngenerateStats((stats) => {\n    new FixedUiElement(stats).AttachTo('maindiv')\n})\n\n\n//*/"]}