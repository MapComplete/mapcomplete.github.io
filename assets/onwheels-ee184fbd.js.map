{"version":3,"file":"onwheels-ee184fbd.js","sources":["../../src/assets/generated/metatagging/onwheels.ts","../../index_onwheels.ts"],"sourcesContent":["import {Feature} from 'geojson'\nimport { ExtraFuncType } from \"../../../Logic/ExtraFunctions\";\nimport { Utils } from \"../../../Utils\"\nexport class ThemeMetaTagging {\n   public static readonly themeName = \"onwheels\"\n\n   public metaTaggging_for_indoors(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_enclosing_building', () => enclosingFeatures(feat)('walls_and_buildings')?.map(f => f.feat.properties.id)?.at(0) ) \n   }\n   public metaTaggging_for_pedestrian_path(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_enclosing_building', () => enclosingFeatures(feat)('walls_and_buildings')?.map(f => f.feat.properties.id)?.at(0) ) \n   }\n   public metaTaggging_for_cycleways_and_roads(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_enclosing_building', () => enclosingFeatures(feat)('walls_and_buildings')?.map(f => f.feat.properties.id)?.at(0) ) \n   }\n   public metaTaggging_for_cafe_pub(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_enclosing_building', () => enclosingFeatures(feat)('walls_and_buildings')?.map(f => f.feat.properties.id)?.at(0) ) \n   }\n   public metaTaggging_for_entrance(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_enclosing_building', () => enclosingFeatures(feat)('walls_and_buildings')?.map(f => f.feat.properties.id)?.at(0) ) \n   }\n   public metaTaggging_for_food(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_enclosing_building', () => enclosingFeatures(feat)('walls_and_buildings')?.map(f => f.feat.properties.id)?.at(0) ) \n   }\n   public metaTaggging_for_kerbs(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_enclosing_building', () => enclosingFeatures(feat)('walls_and_buildings')?.map(f => f.feat.properties.id)?.at(0) ) \n   }\n   public metaTaggging_for_parking(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_enclosing_building', () => enclosingFeatures(feat)('walls_and_buildings')?.map(f => f.feat.properties.id)?.at(0) ) \n   }\n   public metaTaggging_for_parking_spaces_disabled(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_enclosing_building', () => enclosingFeatures(feat)('walls_and_buildings')?.map(f => f.feat.properties.id)?.at(0) ) \n   }\n   public metaTaggging_for_shops(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_enclosing_building', () => enclosingFeatures(feat)('walls_and_buildings')?.map(f => f.feat.properties.id)?.at(0) ) \n   }\n   public metaTaggging_for_toilet(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_enclosing_building', () => enclosingFeatures(feat)('walls_and_buildings')?.map(f => f.feat.properties.id)?.at(0) ) \n   }\n   public metaTaggging_for_pharmacy(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_enclosing_building', () => enclosingFeatures(feat)('walls_and_buildings')?.map(f => f.feat.properties.id)?.at(0) ) \n   }\n   public metaTaggging_for_doctors(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_enclosing_building', () => enclosingFeatures(feat)('walls_and_buildings')?.map(f => f.feat.properties.id)?.at(0) ) \n   }\n   public metaTaggging_for_hospital(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_enclosing_building', () => enclosingFeatures(feat)('walls_and_buildings')?.map(f => f.feat.properties.id)?.at(0) ) \n   }\n   public metaTaggging_for_reception_desk(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_enclosing_building', () => enclosingFeatures(feat)('walls_and_buildings')?.map(f => f.feat.properties.id)?.at(0) ) \n   }\n   public metaTaggging_for_walls_and_buildings(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_enclosing_building', () => enclosingFeatures(feat)('walls_and_buildings')?.map(f => f.feat.properties.id)?.at(0) ) \n      Utils.AddLazyProperty(feat.properties, '_entrance_properties', () => overlapWith(feat)('entrance')?.map(e => e.feat.properties)?.filter(p => p !== undefined && p.indoor !== 'door') ) \n      Utils.AddLazyProperty(feat.properties, '_entrance_properties_with_width', () => get(feat)('_entrance_properties')?.filter(p => p['width'] !== undefined) ) \n      Utils.AddLazyProperty(feat.properties, '_entrances_count', () => get(feat)('_entrance_properties').length ) \n      Utils.AddLazyProperty(feat.properties, '_entrances_count_without_width_count', () =>  get(feat)('_entrances_count') - get(feat)('_entrance_properties_with_width').length ) \n      Utils.AddLazyProperty(feat.properties, '_biggest_width', () =>  Math.max( get(feat)('_entrance_properties').map(p => p.width)) ) \n      Utils.AddLazyProperty(feat.properties, '_biggest_width_properties', () =>  /* Can be a list! */ get(feat)('_entrance_properties').filter(p => p.width === get(feat)('_biggest_width')) ) \n      Utils.AddLazyProperty(feat.properties, '_biggest_width_id', () => get(feat)('_biggest_width_properties').id ) \n   }\n   public metaTaggging_for_elevator(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_enclosing_building', () => enclosingFeatures(feat)('walls_and_buildings')?.map(f => f.feat.properties.id)?.at(0) ) \n   }\n   public metaTaggging_for_tourism_accomodation(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_enclosing_building', () => enclosingFeatures(feat)('walls_and_buildings')?.map(f => f.feat.properties.id)?.at(0) ) \n   }\n   public metaTaggging_for_governments(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_enclosing_building', () => enclosingFeatures(feat)('walls_and_buildings')?.map(f => f.feat.properties.id)?.at(0) ) \n   }\n   public metaTaggging_for_current_view(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_enclosing_building', () => enclosingFeatures(feat)('walls_and_buildings')?.map(f => f.feat.properties.id)?.at(0) ) \n   }\n   public metaTaggging_for_maproulette_challenge(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_enclosing_building', () => enclosingFeatures(feat)('walls_and_buildings')?.map(f => f.feat.properties.id)?.at(0) ) \n      Utils.AddLazyProperty(feat.properties, '_closest_osm_hotel', () => closest(feat)('tourism_accomodation')?.properties?.id ) \n      Utils.AddLazyProperty(feat.properties, '_closest_osm_hotel_distance', () => distanceTo(feat)(feat.properties._closest_osm_hotel) ) \n      Utils.AddLazyProperty(feat.properties, '_has_closeby_feature', () => Number(feat.properties._closest_osm_hotel_distance) < 50 ? 'yes' : 'no' ) \n   }\n}","import layout from \"./src/assets/generated/themes/onwheels.json\"\nimport { ThemeMetaTagging } from \"./src/assets/generated/metatagging/onwheels\"\nimport selected_element from \"./src/assets/generated/layers/selected_element.json\"\nimport gps_location from \"./src/assets/generated/layers/gps_location.json\"\nimport gps_location_history from \"./src/assets/generated/layers/gps_location_history.json\"\nimport home_location from \"./src/assets/generated/layers/home_location.json\"\nimport gps_track from \"./src/assets/generated/layers/gps_track.json\"\nimport range from \"./src/assets/generated/layers/range.json\"\nimport last_click from \"./src/assets/generated/layers/last_click.json\"\nimport favourite from \"./src/assets/generated/layers/favourite.json\"\nimport summary from \"./src/assets/generated/layers/summary.json\"\nimport search from \"./src/assets/generated/layers/search.json\"\nimport geocoded_image from \"./src/assets/generated/layers/geocoded_image.json\"\nimport ThemeViewState from \"./src/Models/ThemeViewState\"\nimport ThemeViewGUI from \"./src/UI/ThemeViewGUI.svelte\"\nimport ThemeConfig from \"./src/Models/ThemeConfig/ThemeConfig\";\nimport MetaTagging from \"./src/Logic/MetaTagging\";\nimport { FixedUiElement } from \"./src/UI/Base/FixedUiElement\";\nimport { Utils } from \"./src/Utils\"\nimport Constants from \"./src/Models/Constants\"\n\nfunction webgl_support() {\n    try {\n        var canvas = document.createElement(\"canvas\")\n        return (\n            !!window.WebGLRenderingContext &&\n            (canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\"))\n        )\n    } catch (e) {\n        return false\n    }\n}\n\nasync function timeout(timeMS: number): Promise<{ layers: string[] }> {\n    await Utils.waitFor(timeMS)\n    return { layers: [] }\n}\n\n\nasync function getAvailableLayers(): Promise<Set<string>> {\n    if(!Constants.SummaryServer){\n        return new Set<string>()\n    }\n    try {\n        const host = new URL(Constants.SummaryServer).host\n        const status = await Promise.any([\n                                   Utils.downloadJson(\"https://\" + host + \"/summary/status.json\"),\n                                   timeout(0)\n                               ])\n        return new Set<string>(status.layers)\n    } catch (e) {\n        console.error(\"Could not get MVT available layers due to\", e)\n        return new Set<string>()\n    }\n}\n\nasync function main() {\n    if (!webgl_support()) {\n         new FixedUiElement(\"WebGL is not supported or not enabled. This is essential for MapComplete to function, please enable this.\").SetClass(\"block alert\").AttachTo(\"maindiv\")\n    }else{\n        const availableLayers = await getAvailableLayers()\n        MetaTagging.setThemeMetatagging(new ThemeMetaTagging())\n        layout.layers.push(<any> selected_element)\n    layout.layers.push(<any> gps_location)\n    layout.layers.push(<any> gps_location_history)\n    layout.layers.push(<any> home_location)\n    layout.layers.push(<any> gps_track)\n    layout.layers.push(<any> range)\n    layout.layers.push(<any> last_click)\n    layout.layers.push(<any> favourite)\n    layout.layers.push(<any> summary)\n    layout.layers.push(<any> search)\n    layout.layers.push(<any> geocoded_image)\n        // LAYOUT.ADD_CONFIG\n        const state = new ThemeViewState(new ThemeConfig(<any> layout), availableLayers)\n        const target =  document.getElementById(\"maindiv\")\n        const childs = Array.from(target.children)\n        new ThemeViewGUI({\n            target,\n            props: { state },\n        })\n        childs.forEach(ch => target.removeChild(ch))\n        Array.from(document.getElementsByClassName(\"delete-on-load\")).forEach(el => {\n                    el.parentElement.removeChild(el)\n                })\n    }\n}\nmain()\n"],"names":["ThemeMetaTagging","feat","helperFunctions","distanceTo","overlapWith","enclosingFeatures","intersectionsWith","closest","closestn","get","Utils","_b","_a","f","e","p","__publicField","webgl_support","canvas","timeout","timeMS","getAvailableLayers","Constants","host","status","main","FixedUiElement","availableLayers","MetaTagging","layout","selected_element","gps_location","gps_location_history","home_location","gps_track","range","last_click","favourite","summary","search","geocoded_image","state","ThemeViewState","ThemeConfig","target","childs","ThemeViewGUI","ch","el"],"mappings":"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"}